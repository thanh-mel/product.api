<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Product.API</name>
    </assembly>
    <members>
        <member name="T:Product.API.Controllers.ProductController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Controllers.ProductController.#ctor(Microsoft.Extensions.Logging.ILogger{Product.API.Controllers.ProductController},Product.API.Services.IProductService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="productService"></param>
        </member>
        <member name="M:Product.API.Controllers.ProductController.GetAllProductAsync">
            <summary>
            Get all products
            </summary>
            <returns></returns>
        </member>
        <member name="M:Product.API.Controllers.ProductController.GetProductAsync(System.Guid)">
            <summary>
            Get a specific product by id
            </summary>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Controllers.ProductController.UpdateProductAsync(Product.API.Models.Product)">
            <summary>
            Update the existing product.
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Controllers.ProductController.CreateProductAsync(Product.API.Models.Product)">
            <summary>
            Create new product. Please ignore the Product Id and Option Id in the payload as they will be automatically generated.
            </summary>
            <param name="createProductRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Controllers.ProductController.DeleteProductAsync(System.String)">
            <summary>
            Delete the existing product
            </summary>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Controllers.ProductOptionController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Controllers.ProductOptionController.#ctor(Microsoft.Extensions.Logging.ILogger{Product.API.Controllers.ProductOptionController},Product.API.Services.IProductOptionService)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="productService"></param>
        </member>
        <member name="M:Product.API.Controllers.ProductOptionController.AddProductOptionsAsync(System.Collections.Generic.List{Product.API.Models.ProductOption})">
            <summary>
            Add more options to a specified product.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Controllers.ProductOptionController.DeleteProductOptionsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Delete options from a specified product.
            </summary>
            <param name="optionIds"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.DbConnection.DbConnectionStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.DbConnection.DbConnectionStrategy.#ctor(System.Collections.Generic.IEnumerable{Product.API.DbConnection.IDbConnectionFactory})">
            <summary>
            
            </summary>
            <param name="factories"></param>
        </member>
        <member name="M:Product.API.DbConnection.DbConnectionStrategy.CreateConnectionAsync(Product.API.Models.DatabaseType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.DbConnection.IDbConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.DbConnection.IDbConnectionFactory.Support(Product.API.Models.DatabaseType)">
            <summary>
            
            </summary>
            <param name="databaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.DbConnection.IDbConnectionFactory.CreateConnectionAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Product.API.DbConnection.IDbConnectionStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.DbConnection.IDbConnectionStrategy.CreateConnectionAsync(Product.API.Models.DatabaseType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.DbConnection.SqliteDbConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.DbConnection.SqliteDbConnectionFactory.#ctor(Microsoft.Extensions.Options.IOptions{Product.API.Models.SqliteDatabaseSettings})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.DbConnection.SqliteDbConnectionFactory.CreateConnectionAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Product.API.DbConnection.SqliteDbConnectionFactory.Support(Product.API.Models.DatabaseType)">
            <summary>
            
            </summary>
            <param name="databaseType"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Exceptions.ConcurrencyOperationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Exceptions.ConcurrencyOperationException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Product.API.Filters.ETagFilter">
            <summary>
            Return an ETag which contains a hash of the requested object. 
            This ETag will then be used along with If-Match to prevent the LOST UPDATE issue.
            </summary>
        </member>
        <member name="M:Product.API.Filters.ETagFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Product.API.Helpers.HashFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Helpers.HashFactory.GetHashSHA256(System.String)">
            <summary>
            Compute hash for the input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Helpers.HashFactory.VerifyHash(System.String,System.String)">
            <summary>
            Verify a hash against a string.
            </summary>
            <param name="inputHash"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Models.DatabaseType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Product.API.Models.DatabaseType.Sqlite">
            <summary>
            
            </summary>
        </member>
        <member name="F:Product.API.Models.DatabaseType.MSSQL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Product.API.Models.DatabaseType.MySQL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Product.API.Models.DatabaseType.Postgres">
            <summary>
            
            </summary>
        </member>
        <member name="T:Product.API.Models.Product">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.Product.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.Product.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.Product.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.Product.Price">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.Product.DeliveryPrice">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.Product.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:Product.API.Models.ProductOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.ProductOption.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.ProductOption.ProductId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.ProductOption.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.ProductOption.Description">
            <summary>
            
            </summary>
        </member>
        <member name="T:Product.API.Models.SqliteDatabaseSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Models.SqliteDatabaseSettings.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="T:Product.API.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Product.API.Program.CreateHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Repositories.DataAccessModels.ProductDataAccessModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Repositories.DataAccessModels.ProductDataAccessModel.ProductId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Repositories.DataAccessModels.ProductDataAccessModel.ProductName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Repositories.DataAccessModels.ProductDataAccessModel.ProductDesc">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Repositories.DataAccessModels.ProductDataAccessModel.Price">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Repositories.DataAccessModels.ProductDataAccessModel.DeliveryPrice">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Repositories.DataAccessModels.ProductDataAccessModel.OptionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Repositories.DataAccessModels.ProductDataAccessModel.OptionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Product.API.Repositories.DataAccessModels.ProductDataAccessModel.OptionDesc">
            <summary>
            
            </summary>
        </member>
        <member name="T:Product.API.Repositories.IRepository`1">
            <summary>
            The generic repository that has basic CRUD operations
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="M:Product.API.Repositories.IRepository`1.CreateAsync(`0)">
            <summary>
            Create a new TModel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.IRepository`1.UpdateAsync(`0)">
            <summary>
            Update the existing the TModel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.IRepository`1.DeleteAsync(System.String)">
            <summary>
            Delete the TModel
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.IRepository`1.GetAsync(System.Guid)">
            <summary>
            Get the TModel by Guid
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.IRepository`1.GetAllAsync">
            <summary>
            Get all TModels 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Product.API.Repositories.Mappers.IProductMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Repositories.Mappers.IProductMapper.Map(System.Collections.Generic.List{Product.API.Repositories.DataAccessModels.ProductDataAccessModel})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Repositories.Mappers.ProductMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Repositories.Mappers.ProductMapper.Map(System.Collections.Generic.List{Product.API.Repositories.DataAccessModels.ProductDataAccessModel})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Repositories.ProductOptionRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Repositories.ProductOptionRepository.#ctor(Microsoft.Extensions.Logging.ILogger{Product.API.Repositories.ProductOptionRepository},Product.API.DbConnection.IDbConnectionStrategy)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="dbConnectionStrategy"></param>
        </member>
        <member name="M:Product.API.Repositories.ProductOptionRepository.DeleteAsync(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.ProductOptionRepository.GetAllAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.ProductOptionRepository.GetAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.ProductOptionRepository.CreateAsync(Product.API.Models.ProductOption)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.ProductOptionRepository.UpdateAsync(Product.API.Models.ProductOption)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Repositories.ProductRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Repositories.ProductRepository.#ctor(Microsoft.Extensions.Logging.ILogger{Product.API.Repositories.ProductRepository},Product.API.DbConnection.IDbConnectionStrategy,Product.API.Repositories.Mappers.IProductMapper)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="dbConnectionStrategy"></param>
            <param name="productMapper"></param>
        </member>
        <member name="M:Product.API.Repositories.ProductRepository.DeleteAsync(System.String)">
            <summary>
            Delete product by id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.ProductRepository.GetAllAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.ProductRepository.GetAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.ProductRepository.CreateAsync(Product.API.Models.Product)">
            <summary>
            Create a new product
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Repositories.ProductRepository.UpdateAsync(Product.API.Models.Product)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Services.IOptimisticLockingResolver">
            <summary>
            IMPORTANT: To avoid the LOST UPDATE problem in REST API where in some cases there will be a risk that multiple requests could 
            update or delete on the same product, therefore we need to implement the optimistic locking either at the Web API level 
            or database level. In this project it's on Web API level.
            </summary>
        </member>
        <member name="M:Product.API.Services.IOptimisticLockingResolver.IsRequestValid(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="inputHash"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Services.IProductOptionService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Services.IProductOptionService.AddProductOptionsAsync(System.Collections.Generic.List{Product.API.Models.ProductOption})">
            <summary>
            Add options to a specified product
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.IProductOptionService.DeleteProductOptionsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Delete options from a product
            </summary>
            <param name="optionIds"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Services.IProductService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Services.IProductService.GetAsync(System.Guid)">
            <summary>
            Get the product by Guid
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.IProductService.GetAllAsync">
            <summary>
            Get all products 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.IProductService.UpdateProductAsync(Product.API.Models.Product)">
            <summary>
            Update existing product
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.IProductService.CreateProductAsync(Product.API.Models.Product)">
            <summary>
            Create new product
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.IProductService.DeleteProductAsync(System.String)">
            <summary>
            
            </summary>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Services.OptimisticLockingResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Services.OptimisticLockingResolver.#ctor(Microsoft.Extensions.Logging.ILogger{Product.API.Services.OptimisticLockingResolver})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Product.API.Services.OptimisticLockingResolver.IsRequestValid(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="inputHash"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Services.ProductOptionService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Services.ProductOptionService.#ctor(Microsoft.Extensions.Logging.ILogger{Product.API.Services.ProductOptionService},Product.API.Repositories.IRepository{Product.API.Models.ProductOption})">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="repository"></param>
        </member>
        <member name="M:Product.API.Services.ProductOptionService.AddProductOptionsAsync(System.Collections.Generic.List{Product.API.Models.ProductOption})">
            <summary>
            Add options to a specified product
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.ProductOptionService.DeleteProductOptionsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Delete options from a specified product
            </summary>
            <param name="optionIds"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Services.ProductService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Services.ProductService.#ctor(Microsoft.Extensions.Logging.ILogger{Product.API.Services.ProductService},Product.API.Repositories.IRepository{Product.API.Models.Product},Microsoft.AspNetCore.Http.IHttpContextAccessor,Product.API.Services.IOptimisticLockingResolver)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="repository"></param>
            <param name="httpContextAccessor"></param>
            <param name="optimisticLockingResolver"></param>
        </member>
        <member name="M:Product.API.Services.ProductService.CreateProductAsync(Product.API.Models.Product)">
            <summary>
            Create new product.
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.ProductService.DeleteProductAsync(System.String)">
            <summary>
            Delete existing product.
            </summary>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.ProductService.GetAllAsync">
            <summary>
            Get all products
            </summary>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.ProductService.GetAsync(System.Guid)">
            <summary>
            Get a specific product by id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Product.API.Services.ProductService.UpdateProductAsync(Product.API.Models.Product)">
            <summary>
            Update the existing product.
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="T:Product.API.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
            <param name="environment"></param>
        </member>
        <member name="P:Product.API.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Product.API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Product.API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
